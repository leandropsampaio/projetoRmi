/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.Trecho;
import Network.Servidor;
import java.awt.Toolkit;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import Controller.Companhia;
import Controller.CompanhiaImplementacao;

/**
 *
 * @author Leandro Pereira Sampaio
 */
public class ClienteRMI extends javax.swing.JFrame {

    private boolean confirmar = false;
    private boolean cancelar = false;
    private Companhia com;
    private Companhia companhia;
    private CompanhiaImplementacao companhia2;
    private int id;
    private Scanner leitura = new Scanner(System.in);
    private DefaultListModel dlm = new DefaultListModel();
    private DefaultListModel dlm2 = new DefaultListModel();

    /**
     * Creates new form Relogio
     */
    public ClienteRMI() {
        //Servidor();
        id = Integer.valueOf(JOptionPane.showInputDialog("Digite o id da companhia que você deseja se conectar:"));
        setIcon();
        initComponents();
        buttonConfirmar.setEnabled(false);
        buttonCancelar.setEnabled(false);
        try {
            companhia = (Companhia) Naming.lookup("127.0.0.1/PassagensAreas" + id);
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonMostrarTrechos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaTrechos = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaReservas = new javax.swing.JList<>();
        buttonEscolher = new javax.swing.JButton();
        buttonRemover = new javax.swing.JButton();
        buttonConfirmar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buttonReservar = new javax.swing.JButton();
        label = new javax.swing.JLabel();
        buttonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Passagens Aéreas");

        buttonMostrarTrechos.setFont(new java.awt.Font("Trajan Pro", 1, 14)); // NOI18N
        buttonMostrarTrechos.setText("Mostrar Trechos");
        buttonMostrarTrechos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMostrarTrechosActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listaTrechos);

        jScrollPane2.setViewportView(listaReservas);

        buttonEscolher.setFont(new java.awt.Font("Trajan Pro", 1, 14)); // NOI18N
        buttonEscolher.setText("Escolher => ");
        buttonEscolher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEscolherActionPerformed(evt);
            }
        });

        buttonRemover.setFont(new java.awt.Font("Trajan Pro", 1, 14)); // NOI18N
        buttonRemover.setText("<= Remover");
        buttonRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverActionPerformed(evt);
            }
        });

        buttonConfirmar.setBackground(new java.awt.Color(0, 204, 0));
        buttonConfirmar.setFont(new java.awt.Font("Trajan Pro", 1, 14)); // NOI18N
        buttonConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/ok-mark.png"))); // NOI18N
        buttonConfirmar.setText("Confirmar");
        buttonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Trajan Pro", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 204, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Passagens Aéreas");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 255)));

        buttonReservar.setFont(new java.awt.Font("Trajan Pro", 1, 14)); // NOI18N
        buttonReservar.setText("Reservar");
        buttonReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReservarActionPerformed(evt);
            }
        });

        label.setFont(new java.awt.Font("Trajan Pro", 0, 48)); // NOI18N
        label.setForeground(new java.awt.Color(255, 0, 0));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        buttonCancelar.setBackground(new java.awt.Color(255, 0, 0));
        buttonCancelar.setFont(new java.awt.Font("Trajan Pro", 1, 14)); // NOI18N
        buttonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cancel.png"))); // NOI18N
        buttonCancelar.setText("Cancelar");
        buttonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(buttonMostrarTrechos)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonEscolher)
                            .addComponent(buttonRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonReservar)
                        .addGap(136, 136, 136))))
            .addGroup(layout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addComponent(buttonCancelar)
                .addGap(18, 18, 18)
                .addComponent(buttonConfirmar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonEscolher)
                        .addGap(73, 73, 73)
                        .addComponent(buttonRemover)
                        .addGap(56, 56, 56)
                        .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonMostrarTrechos)
                            .addComponent(buttonReservar))
                        .addGap(41, 41, 41))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonConfirmar)
                        .addComponent(buttonCancelar)))
                .addGap(4, 4, 4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonMostrarTrechosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMostrarTrechosActionPerformed
        //limpar a lista de trechos
        /*
        dlm.removeAllElements();
        dlm2.removeAllElements();
        listaTrechos.setModel(dlm);
        listaReservas.setModel(dlm2);
         */

        mostrarTrechos();
    }//GEN-LAST:event_buttonMostrarTrechosActionPerformed

    private void buttonEscolherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEscolherActionPerformed
        dlm2.addElement(listaTrechos.getSelectedValue()); //Pega o trecho escolhido na lista e adiciona na outra lista

        listaReservas.setModel(dlm2);
    }//GEN-LAST:event_buttonEscolherActionPerformed

    private void buttonRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverActionPerformed
        dlm2.removeElement(listaReservas.getSelectedValue());

        listaReservas.setModel(dlm2);
    }//GEN-LAST:event_buttonRemoverActionPerformed

    private void buttonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmarActionPerformed
        confirmar = true;

        //comprar
        int ids[] = this.pedirAcesso(dlm2.toArray());
        try {
            companhia.comprar(ids);
        } catch (RemoteException ex) {
            Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //LiberaRegCrit
        this.liberarRegCrit(ids);

        //limpar a lista de trechos escolhidos
        dlm.removeAllElements();
        dlm2.removeAllElements();
        listaTrechos.setModel(dlm);
        listaReservas.setModel(dlm2);

        //desativar buttons
        buttonConfirmar.setEnabled(false);
        buttonCancelar.setEnabled(false);

        //zerar cronômetro
        label.setText("");
        JOptionPane.showMessageDialog(rootPane, "Compra realizada com sucesso!");

        mostrarTrechos();
    }//GEN-LAST:event_buttonConfirmarActionPerformed

    private void buttonReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReservarActionPerformed
        reservar(dlm2.toArray());
        System.out.println("PASSOU");
        //contagem();

    }//GEN-LAST:event_buttonReservarActionPerformed

    private void buttonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarActionPerformed
        cancelar = true;

        //cancelar
        int ids[] = this.pedirAcesso(dlm2.toArray());
        try {
            companhia.desistir(ids);
        } catch (RemoteException ex) {
            Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Libera regCrit
        this.liberarRegCrit(ids);

        //limpar a lista de trechos escolhidos
        dlm.removeAllElements();
        dlm2.removeAllElements();
        listaTrechos.setModel(dlm);
        listaReservas.setModel(dlm2);

        //desativar buttons
        buttonConfirmar.setEnabled(false);
        buttonCancelar.setEnabled(false);
    }//GEN-LAST:event_buttonCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteRMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteRMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteRMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteRMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteRMI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancelar;
    private javax.swing.JButton buttonConfirmar;
    private javax.swing.JButton buttonEscolher;
    private javax.swing.JButton buttonMostrarTrechos;
    private javax.swing.JButton buttonRemover;
    private javax.swing.JButton buttonReservar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label;
    private javax.swing.JList<String> listaReservas;
    private javax.swing.JList<String> listaTrechos;
    // End of variables declaration//GEN-END:variables

    public void mostrarTrechos() {
        List trechos;
        try {
            trechos = companhia.trechos();

            Iterator it = trechos.iterator();
            while (it.hasNext()) {
                //dlm.addElement("BBB");
                Trecho trecho = (Trecho) it.next();
                dlm.addElement(trecho.getId() + "- Origem: " + trecho.getOrigem() + " | Destino: " + trecho.getDestino()
                        + "  |  Assentos: " + trecho.getQuantAssentos() + " | Companhia -" + trecho.getCompanhia());
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }

        listaTrechos.setModel(dlm);
    }

    /*
    private void comprar(Object[] trechos) {
        int ids[];
        boolean compraConcedida = false;
        try {
            //Pede acesso
            ids = this.pedirAcesso(trechos);
            
            for (Object objetoTrecho : trechos) {
                compraConcedida = companhia.comprar(objetoTrecho.toString());
                if (compraConcedida == false) {
                    break;
                }
            }

            if (compraConcedida == true) {
                JOptionPane.showMessageDialog(rootPane, "Sua compra foi realizada com sucesso!");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Sua compra não pode ser realizada!");
            }

            this.liberarRegCrit(ids);
        } catch (RemoteException ex) {
            Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }*/
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Imagens/plane.png")));
    }

    private void liberarRegCrit(int[] ids) {
        try {
            companhia.liberarAcesso(ids);
        } catch (RemoteException ex) {
            Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private int[] pedirAcesso(Object[] trechos) {
        int ids[] = new int[trechos.length];
        Object objetoTrecho2;
        boolean regCrit = false;
        //Transforma trechos em vetor de ids
        for (int i = 0; i < trechos.length; i++) {
            System.out.println("AQUI:" + i);
            objetoTrecho2 = trechos[i];
            String protocolo[] = objetoTrecho2.toString().split("-");
            ids[i] = Integer.parseInt(protocolo[0]);
            System.out.println(ids[i] + "////" + trechos[i]);
        }
        //Pede autorização para entrar na região critica
        while (!regCrit) {
            try {
                regCrit = companhia.autorizarTotals(ids);
            } catch (RemoteException ex) {
                Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //System.out.println(ids[0] + "Funcionando");
        return ids;
    }

    private void reservar(Object[] trechos) {
        try {
            int statusDoTrecho = 0;
            int[] ids = pedirAcesso(trechos);
            try {
                System.out.println("xxxxxxxxxxxxxx");
                statusDoTrecho = companhia.checarDisp(ids);
                System.out.println("ZZZZZZZZZZZZZZZ");
            } catch (RemoteException ex) {
                Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println("Status do trecho " + statusDoTrecho);
            switch (statusDoTrecho) {

                case 0: //chama função para reservar o trecho
                    boolean reserva = companhia.reservando(ids); //Reserva os trechos
                    if (reserva == true) {
                        buttonConfirmar.setEnabled(true); //Compra os trechos
                        buttonCancelar.setEnabled(true); //Desiste dos trechos
                        contagem(0, ids);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Alguns desses trechos não mais estão disponíveis! Tente novamente...");
                    }
                    break; //Todos os trechos disponíveis

                case 1: //chama função para ir pra lista de espera
                    buttonConfirmar.setEnabled(false);
                    buttonCancelar.setEnabled(false);
                    contagem(1, ids);

                    JOptionPane.showMessageDialog(rootPane, "Aguarde, você está na lista de espera...");
                    break; //Caso exatamente 1 trecho esteja reservado e o resto disponível

                case 2: //nega a requisição
                    buttonConfirmar.setEnabled(false);
                    buttonCancelar.setEnabled(false);

                    //limpar a lista de trechos escolhidos
                    dlm2.removeAllElements();
                    listaTrechos.setModel(dlm);
                    listaReservas.setModel(dlm2);
                    JOptionPane.showMessageDialog(rootPane, "Alguns desses trechos não mais estão disponíveis! Tente novamente...");
                default:
                    break;
            }
            liberarRegCrit(ids);
        } catch (RemoteException ex) {
            Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void contagem(int status, int[] ids) {

        new Thread() {
            @Override
            public void run() {
                int status2 = status;
                int contador = 20; // Valor que inicia o contador
                while (true) {
                    try {
                        //Contagem ilimitada
                        Thread.sleep(1000);   //No caso, correspondente ao tempo de drift
                    } catch (InterruptedException ex) {
                        System.out.println("ERRO!");
                    }

                    contador = contador - 1;   //Variável de controle do tempo

                    label.setText(String.valueOf(contador));

                    System.out.println("STATUS: " + status); // variável status não atualiza
                    System.out.println("STATUS2: " + status2); // variável status não atualiza

                    if (confirmar == true) {
                        confirmar = false;
                        label.setText("");
                        break;
                    } else if (cancelar == true) {
                        cancelar = false;
                        label.setText("");
                        JOptionPane.showMessageDialog(rootPane, "Compra cancelada com sucesso!");
                        break;
                    }
                    /*
                    try {
                        status2 = companhia.checarDisp(ids);
                    } catch (RemoteException ex) {
                        Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (status2 == 0 && passou == 0) {
                        passou = 1; // Entrar uma única vez
                        buttonConfirmar.setEnabled(true);
                        buttonCancelar.setEnabled(true);
                        JOptionPane.showMessageDialog(rootPane, "Trecho liberado...");
                    }*/
                    if (contador == 0) {
                        if (status == 0) {
                            try {
                                companhia.desistir(ids); // DANDO ERRO!
                                buttonConfirmar.setEnabled(false);
                                buttonCancelar.setEnabled(false);
                                JOptionPane.showMessageDialog(rootPane, "Tempo encerrado, espero que tenha escolhido bem.");
                            } catch (RemoteException ex) {
                                Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else if (status == 1) {
                            try {
                                if (companhia.checarDisp(ids) == 0) {
                                    buttonConfirmar.setEnabled(true);
                                    buttonCancelar.setEnabled(true);
                                } else {
                                    //limpar a lista de trechos escolhidos

                                    dlm2.removeAllElements();
                                    listaTrechos.setModel(dlm);
                                    listaReservas.setModel(dlm2);
                                    JOptionPane.showMessageDialog(rootPane, "Alguns desses trechos não mais estão disponíveis! Tente novamente...");
                                }

                            } catch (RemoteException ex) {
                                Logger.getLogger(ClienteRMI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        break;
                    }
                }
            }
        }.start();
    }
}
